#Consider this as readme file to lazy :/
#The problem statement demands for machine learning approach in scheduleing 
'''for this we can approach the problem by dynamic schedueling and also apply 
patient booking scheduler and data driven scheduler
Such as dental ward mighgt be more demanding in particular month due to 
 factors  '''
#This program is for logic of schedueling dental ward's patients effectively
#This is a working logic only for a week or two 
#There for days might be preferred instead of days 
#This is only backend needs API desiging and all other shits
#The clock to be used should be of twenty four hours format 
''' Health function refers to overall scheduled quality 
Filter function filters the avaliable doctors according to their preferances and 
lectures '''
#If the user can use emacs it would be better as various flow charts and various ideas 
#Could be discussed in the file itself  
#This program takes in account that it is an government hospital
import calendar 
import random 
allocated_doctors=[]
mouth_filling=[]
root_canal=[]
tooth_removal=[]
cleaning=[]
crowning=[]
first_visit=[]
senior_doctors=[]
universal_list=[]
intern_fresh=[]
root_canal_specialist=[]
group_diagnosis=[]
mid_intern=[]
expert_surgeon=[]
surgery=[]
patient_ids=[]
class doctors:
    def _init_(self,name,degree,time,holiday,lecture,operation,hours,leave=False):
        self.name= name
        self.degree= degree
        #limit of only one hour 
        self.time= time
        self.holiday= holiday
        self.lecture= lecture
        self.operation= operation
        self.hours=hours.pop(time)
        self.leave=leave

class patients:
    #A special ID of each patient can be created to store data such of the patients
    #Data may contain diagonosis
    def _init_(self,name,age,case,case_severity=0,pref_time=0,pref_day=0,ids=0):
        self.name=name
        self.age= age
        self.case=case
        self.case_severity=case_severity
        self.pref_time=pref_time
        self.pref_day=pref_day
        self.ids= ids
    def Listing_id_of_patient(ids):
        patient_ids.append(ids)
#Defining a list // dicitionary or ricitoanry for patients list 
#This list only contains patients severity and index numbers are there 
patients_list={1:2,2:3,3:4}
doctor_1=doctors("Dr Gardi",2,1,12,5,1)
doctors_list={1:doctor_1,2:"B",3:"C"}
#Assign doctor that is more qualified to severy cases and interns to less severes
class interns(doctors):
    def __init__(self, name, degree, time, holiday, lecture, operation,level=0):
        super().__init__(name, degree, time, holiday)
        self.lecture = lecture
        self.operation = operation
        self.level=level
Patients_list={1:2,2:3,3:5}
#This logic was is for assigning work only for qualified work i.e doctor having the 
#the particular qualification for doing the work if fulfilled it is assigned 
for i in patients_list:
    value=patients_list[i]
    for j in doctors_list:
        valuer=doctors_list[j]
        if value==valuer:
            allocated_doctors.append(valuer)
def health_function(health):
    health +=1
    #The function is incomplete
    #Logic would be same as timetable scheduler 
    #determing the health might be challenging *the factors*

    return health
def fitler_function(unfiltered_list,filtered_list,coffee):
   # unfiltered_list=doctors_list[]
   
   infinty= -99
   
  # if doctor_1.operation > infinty:
       #pass\
    
   
   for i in doctors_list:
       if i.degree==1:
           i.name.append(intern_fresh)
           break
       elif i.degree==2:
           i.name.append(mid_intern)
           
       elif i.degree==3:
           i.name.append(senior_doctors)
       elif i.degree==4:
           i.name.append(expert_surgeon) 
   for j in patients_list:
       if j.case=="root canal":
           j.id.append(root_canal)
       elif j.case=="crowing":
           j.id.append(crowning)
       elif j.case=="cleaning":
           j.id.append(cleaning)
       elif j.case=="tooth removal":
           j.id.append(tooth_removal)
       else:
           print("Service not available")

       
           
           
           
   #This function is for making the list of qualified doctors 
   #List of Patiens 
   #list of patients according to their disease can be done for example
   #mouth_filling=[]
   #root_canal=[]
   #tooth_removal=[]
   #cleaning=[]
   #crowning=[]
   #first_visit=[]
   #Doctors list can also be qualified like this or set may be used accordingly
   #senior_doctors=[]
   #universal_list=[]
   #intern_fresh=[]
   #root_canal_specialist=[]
   #group_diagnosis=[]
def timings_manager(time,breaks,day_hours=5):
       #matching the patients schedule with doctors availabililty
       for i in patients_list & j in doctors_list:
           if i.pref_time in j.hours:
               patient_ids.append(j.name)
               #Just Create a seperated list for allocated doctors of patient
               #Instead of using universal list use the sorted list according to it
               #Health function optimization is required for this purpose
               
       pass
def lecture_manager(manage):
       pass
#defining diagnosis and giving them indexes

   #Diagnosis index according to the list indexing
def severity_matcher(matcher,var_tooth_filling,var_crowing,var_surgery,var_root_canal,var_cleaning):
    
        # For matching the severity and doctors case
  matcher= [
  var_tooth_filling=0.6,
  var_crowing=1,
  var_surgery=5,
  var_root_canal=3,
  var_cleaning=0.2,
  ]
#Fixing the error in this 
#declar this variables as global variables // friend variables
def Available_doctors_today(todays_avaliable_list,emergency_doctor):
    #This function is for dynamic scheduling
    todays_avaliable_list=doctors_list
    for i in doctors_list:
        if i.leave==True:
            todays_avaliable_list.pop(i)
        #Using random randint function for randomised emergency doctor
        #Usig Machine learning approach for best randomised reservation
        


    

            
    
        

            






       
       
       

    




        



